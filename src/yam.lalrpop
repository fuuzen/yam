use crate::ast::{*};

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释.
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 剩下的情况采用默认方式处理
  // TODO: 处理形如 /* ... */ 的块注释. 块注释也可以用正则表达式表达, 但会稍微复杂一些
  _
}

pub CompUnit: CompUnit = {
  <tempo: Tempo> <time_signature: TimeSignature> <func_def: FuncDef> => CompUnit { <> },
}

Tempo: i32 = {
  "Tempo" "=" <Number> ";" => <>,
}

TimeSignature: TimeSignature = {
  "TimeSignature" "=" <numerator: IntConst> "/" <denominator: IntConst> ";"  => TimeSignature { <> },
}

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = {
  "midi" => FuncType::Midi,
}

Block: Block = {
  "{" <stmts: Stmts<Play>> "}" => Block { <> },
}

Stmts<T>: Vec<T> = {
  <mut v:(<T> ";")*> <e:T?> => match e {
    None => v,
    Some(e) => {
      v.push(e);
      v
    }
  }
}

Play: Play = {
  "play(" <bar: Number> "," <start: Number> "," <end: Number> "," <pitch: Number> ")" => Play { <> },
}

Number: i32 = {
  <num: IntConst> => <>,
}

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号(lalrpop 的语法糖)在此处指代的是正则表达式匹配到的字符串 (&str)
Ident: String = {
  r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string(),
}

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Minus,
  "!" => UnaryOp::Not,
}

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
}

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
}

RelOp: RelOp = {
  ">" => RelOp::Gt,
  "<" => RelOp::Lt,
  ">=" => RelOp::Ge,
  "<=" => RelOp::Le,
}

EqOp: EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::Ne,
}

Exp: Exp = {
  <LOrExp> => <>,
}

PrimaryExp: PrimaryExp = {
  "(" <Exp> ")" => PrimaryExp::Exp( <> ),
  <Ident> => PrimaryExp::LVal( <> ),
  <Number> => PrimaryExp::Number( <> ),
}

UnaryExp: UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp {
    unary_ops: vec![],
    primary_exp: primary_exp,
  },
  <unary_op: UnaryOp> <unary_exp: UnaryExp> => {
    let mut v = unary_exp;
    v.unary_ops.push(unary_op);
    v
  },
}

MulExp: MulExp = {
  <unary_exp: UnaryExp> => MulExp {
    mul_ops: vec![],
    unary_exps: vec![ unary_exp ],
  },
  <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => {
    let mut v = mul_exp;
    v.mul_ops.push(mul_op);
    v.unary_exps.push(unary_exp);
    v
  },
}

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp {
    add_ops: vec![],
    mul_exps: vec![ mul_exp ],
  },
  <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => {
    let mut v = add_exp;
    v.add_ops.push(add_op);
    v.mul_exps.push(mul_exp);
    v
  },
}

RelExp: RelExp = {
  <add_exp: AddExp> => RelExp {
    rel_ops: vec![],
    add_exps: vec![ add_exp ],
  },
  <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => {
    let mut v = rel_exp;
    v.rel_ops.push(rel_op);
    v.add_exps.push(add_exp);
    v
  },
}

EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp {
    eq_ops: vec![],
    rel_exps: vec![ rel_exp ],
  },
  <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => {
    let mut v = eq_exp;
    v.eq_ops.push(eq_op);
    v.rel_exps.push(rel_exp);
    v
  },
}

LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp {
    eq_exps: vec![ eq_exp ],
  },
  <land_exp: LAndExp> "&&" <eq_exp: EqExp> => {
    let mut v = land_exp;
    v.eq_exps.push(eq_exp);
    v
  },
}

LOrExp: LOrExp = {
  <land_exp: LAndExp> => LOrExp {
    land_exps: vec![ land_exp ],
  },
  <lor_exp: LOrExp> "&&" <land_exp: LAndExp> => {
    let mut v = lor_exp;
    v.land_exps.push(land_exp);
    v
  },
}