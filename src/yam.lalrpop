// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释.
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 剩下的情况采用默认方式处理
  // TODO: 处理形如 /* ... */ 的块注释. 块注释也可以用正则表达式表达, 但会稍微复杂一些
  _
}

// .lalrpop 不能用 mod 语句
use crate::ast::btype::{*};
use std::rc::Rc;

BType: BType = {
  "int" => BType::Int,
}

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号(lalrpop 的语法糖)在此处指代的是正则表达式匹配到的字符串 (&str)
Ident: String = {
  r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string(),
}

LVal: LVal = {
  <ident: Ident> => LVal::new(ident),
  /* TODO: 支持数组，即左值支持下标 */
}

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Number: i32 = {
  <IntConst> => <>,
}

// 无分隔符号分隔的 T 规则匹配的非空 T 列表
Vec<T>: Vec<T> = {
  <T> => vec![ <> ],
  <mut v : Vec<T>> <t: T> => {
    v.push(t);
    v
  }
}

// 逗号分隔的 T 规则匹配的非空 T 列表
VecComma<T>: Vec<T> = {
  <T> => vec![ <> ],
  <mut v : VecComma<T>> "," <t: T> => {
    v.push(t);
    v
  }
}

// 可选规则
Option<T>: Option<T> = {
  () => None,
  <T> => Some( <> ),
}

/******************************* exp 部分 开始 ******************************/

use crate::ast::expr::{*};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Plus,
  "-" => UnaryOp::Minus,
  "!" => UnaryOp::Not,
}

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
}

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
}

RelOp: RelOp = {
  ">" => RelOp::Gt,
  "<" => RelOp::Lt,
  ">=" => RelOp::Ge,
  "<=" => RelOp::Le,
}

EqOp: EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::Ne,
}

Expr: Expr = {
  <LOrExpr> => <>,
}

PrimaryExpr: PrimaryExpr = {
  "(" <Expr> ")" => PrimaryExpr::Expr( <> ),
  <LVal> => PrimaryExpr::LVal( <> ),
  <Number> => PrimaryExpr::Number( <> ),
  <FuncCall> => PrimaryExpr::FuncCall( <> ),
}

UnaryExpr: UnaryExpr = {
  <primary_exp: PrimaryExpr> => UnaryExpr {
    unary_ops: vec![],
    primary_exp: primary_exp,
  },
  <unary_op: UnaryOp> <mut unary_exp: UnaryExpr> => {
    unary_exp.unary_ops.push(unary_op);
    unary_exp
  },
}

MulExpr: MulExpr = {
  <unary_exp: UnaryExpr> => MulExpr {
    mul_ops: vec![],
    unary_exps: vec![ unary_exp ],
  },
  <mut mul_exp: MulExpr> <mul_op: MulOp> <unary_exp: UnaryExpr> => {
    mul_exp.mul_ops.push(mul_op);
    mul_exp.unary_exps.push(unary_exp);
    mul_exp
  },
}

AddExpr: AddExpr = {
  <mul_exp: MulExpr> => AddExpr {
    add_ops: vec![],
    mul_exps: vec![ mul_exp ],
  },
  <mut add_exp: AddExpr> <add_op: AddOp> <mul_exp: MulExpr> => {
    add_exp.add_ops.push(add_op);
    add_exp.mul_exps.push(mul_exp);
    add_exp
  },
}

RelExpr: RelExpr = {
  <add_exp: AddExpr> => RelExpr {
    rel_ops: vec![],
    add_exps: vec![ add_exp ],
  },
  <mut rel_exp: RelExpr> <rel_op: RelOp> <add_exp: AddExpr> => {
    rel_exp.rel_ops.push(rel_op);
    rel_exp.add_exps.push(add_exp);
    rel_exp
  },
}

EqExpr: EqExpr = {
  <rel_exp: RelExpr> => EqExpr {
    eq_ops: vec![],
    rel_exps: vec![ rel_exp ],
  },
  <mut eq_exp: EqExpr> <eq_op: EqOp> <rel_exp: RelExpr> => {
    eq_exp.eq_ops.push(eq_op);
    eq_exp.rel_exps.push(rel_exp);
    eq_exp
  },
}

LAndExpr: LAndExpr = {
  <eq_exp: EqExpr> => LAndExpr {
    eq_exps: vec![ eq_exp ],
  },
  <mut land_exp: LAndExpr> "&&" <eq_exp: EqExpr> => {
    land_exp.eq_exps.push(eq_exp);
    land_exp
  },
}

LOrExpr: LOrExpr = {
  <land_exp: LAndExpr> => LOrExpr {
    land_exps: vec![ land_exp ],
  },
  <mut lor_exp: LOrExpr> "||" <land_exp: LAndExpr> => {
    lor_exp.land_exps.push(land_exp);
    lor_exp
  },
}

/******************************* exp 部分 结束 ******************************/
/******************************* stmt 部分 开始 ******************************/

use crate::ast::stmt::{*};

ConstDef: ConstDef = {
  <ident: Ident> "=" <expr: Expr> => ConstDef{ <> },
}

ConstDecl: ConstDecl = {
  "const" <btype: BType> <const_defs: VecComma<ConstDef>> ";" => ConstDecl { <> }
}

VarDef: VarDef = {
  <ident: Ident> => VarDef{
    ident,
    expr_ : None,
  },
  <ident: Ident> "=" <expr_: Expr> => VarDef{
    ident,
    expr_ : Some(expr_),
  },
}

VarDecl: VarDecl = {
  <btype: BType> <var_defs: VecComma<VarDef>> ";" => VarDecl { <> }
}

Asgn: Asgn = {
  <lval: LVal> "=" <expr: Expr> ";" => Asgn{ <> },
}

If: If = {
  "if" "(" <cond: Expr> ")" <body: Stmt> => If {
    cond,
    body: Box::new(body),
  },
}

Else: Else = {
  "else" <body: Stmt>  => Else {
    body: Box::new(body),
  },
}

While: While = {
  "while" "(" <cond: Expr> ")" <body: Stmt> => While {
    cond,
    body: Box::new(body),
  },
}

Stmt: Stmt = {
  <Option<Expr>> ";" => Stmt::Expr( <> ),
  <ConstDecl> => Stmt::ConstDecl( <> ),
  <VarDecl> => Stmt::VarDecl( <> ),
  <Asgn> => Stmt::Asgn( <> ),
  <Block> => Stmt::Block( <> ),
  <If> => Stmt::If( <> ),
  <Else> => Stmt::Else( <> ),
  <While> => Stmt::While( <> ),
  "break" ";" => Stmt::Break,
  "continue" ";" => Stmt::Continue,
  "return" ";" => Stmt::Return( None ),
  "return" <expr: Expr> ";" => Stmt::Return( Some(expr) ),
}

Stmts: Vec<Stmt> = {
  <stmt: Stmt> => vec![ stmt ],
  <stmts: Stmts> <stmt: Stmt> => {
    let mut v = stmts;
    v.push(stmt);
    v
  },
}

/******************************* stmt 部分 结束 ******************************/
/******************************* block 部分 开始 ******************************/

use crate::ast::block::Block;

Block: Rc<Block> = {
  "{" <stmts: Stmts> "}" => Rc::new(Block::new(stmts)),
}

/******************************* block 部分 结束 ******************************/
/******************************* func 部分 开始 ******************************/

use crate::ast::func::{*};

FuncType: FuncType = {
  <btype: BType> => FuncType::BType( <> ),
  "void" => FuncType::Void,
}

FuncFParam: FuncFParam = {
  <btype: BType> <ident: Ident> => FuncFParam::new(btype, ident),
}

FuncDef: Rc<FuncDef> = {
  <btype: BType> <ident: Ident> "(" <func_fparams: VecComma<FuncFParam>> ")" <block: Block> => Rc::new(FuncDef{
    func_type: FuncType::BType( btype ),
    ident,
    func_fparams,
    block,
  }),
  "void" <ident: Ident> "(" <func_fparams: VecComma<FuncFParam>> ")" <block: Block> => Rc::new(FuncDef {
    func_type: FuncType::Void,
    ident,
    func_fparams,
    block,
  }),
}

FuncCall: FuncCall = {
  <ident: Ident> "(" <func_rparams: VecComma<Expr>> ")" => FuncCall::new(ident, func_rparams),
}

/******************************* func 部分 结束 ******************************/
/******************************* comp_unit 部分 开始 ******************************/

use crate::ast::comp_unit::{*};

Def: Def = {
  <ConstDecl> => Def::ConstDecl( <> ),
  <VarDecl> => Def::VarDecl( <> ),
  <FuncDef> => Def::FuncDef( <> ),
}

/* 定义为 pub 导出语法解析器 */
pub CompUnit: CompUnit = {
  <defs: Option<Vec<Def>>> => {
    let stmts = match defs {
      Some(defs) => defs.into_iter().map(|def| match def {
        Def::ConstDecl(const_decl) => Stmt::ConstDecl(const_decl),
        Def::VarDecl(var_decl) => Stmt::VarDecl(var_decl),
        Def::FuncDef(func_def) => Stmt::FuncDef(func_def),
      }).collect(),
      None => vec![],
    };
    CompUnit {
      block: Rc::new(Block::new(stmts)),
    }
  },
}

/******************************* comp_unit 部分 结束 ******************************/