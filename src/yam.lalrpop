use crate::ast::{*};

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释.
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // 剩下的情况采用默认方式处理
  // TODO: 处理形如 /* ... */ 的块注释. 块注释也可以用正则表达式表达, 但会稍微复杂一些
  _
}

pub CompUnit: CompUnit = {
  <tempo: Tempo> <time_signature: TimeSignature> <func_def: FuncDef> => CompUnit { <> },
}

Tempo: i32 = {
  "Tempo" "=" <Number> ";" => <>,
}

TimeSignature: TimeSignature = {
  "TimeSignature" "=" <numerator: IntConst> "/" <denominator: IntConst> ";"  => TimeSignature { <> },
}

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = {
  "midi" => FuncType::Midi,
}

Block: Block = {
  "{" <stmts: Stmts<Play>> "}" => Block { <> },
};

Stmts<T>: Vec<T> = {
  <mut v:(<T> ";")*> <e:T?> => match e {
    None => v,
    Some(e) => {
      v.push(e);
      v
    }
  }
}

Play: Play = {
  "play(" <bar: Number> "," <start: Number> "," <end: Number> "," <pitch: Number> ")" => Play { <> },
};

Number: i32 = <num: IntConst> => <>;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

