UnaryOp       ::= "+" | "-" | "!";
MulOp         ::= "*" | "/" | "%";
AddOp         ::= "+" | "-";
RelOp         ::= "<" | ">" | "<=" | ">=";
EqOp          ::= "==" | "!=";

Number        ::= INT_CONST;  /* i32 */
PrimaryExp    ::= "(" Exp ")" | IDENT | Number;

UnaryExp      ::= PrimaryExp | UnaryOp UnaryExp | FuncCall;
MulExp        ::= UnaryExp | MulExp MulOp UnaryExp;
AddExp        ::= MulExp | AddExp AddOp MulExp;
RelExp        ::= AddExp | RelExp RelOp AddExp;
EqExp         ::= RelExp | EqExp EqOp RelExp;
LAndExp       ::= EqExp | LAndExp "&&" EqExp;
LOrExp        ::= LAndExp | LOrExp "||" LAndExp;
Exp           ::= LOrExp;

BType         ::= "int";
ConstDecl     ::= "const" BType ConstDef {"," ConstDef} ";";
ConstDef      ::= IDENT "=" Exp;
VarDecl       ::= BType VarDef {"," VarDef} ";";
VarDef        ::= IDENT | IDENT "=" Exp;
Decl          ::= ConstDecl | VarDecl;   /* 声明语句 */

FuncType      ::= "void" | "int";
FuncFParams   ::= FuncFParam {"," FuncFParam};
FuncFParam    ::= BType IDENT;
FuncRParams   ::= Exp {"," Exp};
FuncDef       ::= FuncType IDENT "(" [FuncFParams] ")" Block;  /* 函数定义(无声明，直接实现) */
FuncCall      ::= IDENT "(" [FuncRParams] ")";                 /* 函数调用 */

MacroName     ::= "next" | "play" | "tempo" | "meter"
MacroCall     ::= FuncName "(" {Exp} ")" ";" /* 参数检查放在语义检查 */

Stmt ::= Block
       | IDENT "=" Exp ";"  /* 赋值语句 */
       | [Exp] ";"          /* 无意义表达式 */
       | "if" "(" Exp ")" Stmt ["else" Stmt]
       | "while" "(" Exp ")" Stmt
       | "break" ";"
       | "continue" ";"
       | "return" [Exp] ";"
       ;

Block         ::= "{" {BlockItem} "}";
BlockItem     ::= Decl | Stmt | MacroCall;

Track         ::= "track" IDENT Block;