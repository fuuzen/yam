UnaryOp     ::= "+" | "-" | "!";
MulOp       ::= "*" | "/" | "%";
AddOp       ::= "+" | "-";
RelOp       ::= "<" | ">" | "<=" | ">=";
EqOp        ::= "==" | "!=";
BType       ::= "int" | "note" | "measure" | "phrase" | "track";

Number      ::= INT_CONST;           /* int -> i32 */
LVal        ::= IDENT                /* TODO: 支持数组，即左值支持下标 */

PrimaryExpr ::= "(" Expr ")" | LVal | Number | FuncCall;
UnaryExpr   ::= PrimaryExpr | UnaryOp UnaryExpr;
MulExpr     ::= UnaryExpr | MulExpr MulOp UnaryExpr;
AddExpr     ::= MulExpr | AddExpr AddOp MulExpr;
RelExpr     ::= AddExpr | RelExpr RelOp AddExpr;
EqExpr      ::= RelExpr | EqExpr EqOp RelExpr;
LAndExpr    ::= EqExpr | LAndExpr "&&" EqExpr;
LOrExpr     ::= LAndExpr | LOrExpr "||" LAndExpr;
Expr        ::= LOrExpr

Note        ::= Expr "'" Expr ["=" Expr] | Expr "'" NoteExpr;
NoteRVal    ::= Note | Expr;
MeasureAttr ::= "<" Expr ":" Expr [ "," Expr  ] ">";
MeasureUnit ::= "." | "<" | ">" | NoteRVal;
Measure     ::= [ MeasureAttr ] "|" {MeasureUnit} "|";
MeasureRVal ::= Measure | LVal | FuncCall
Phrase      ::= [ MeasureAttr ] "[" {MeasureRVal} "]";
PhraseRVal  ::= Phrase | LVal | FuncCall
Track       ::= "{" {PhraseRVal} "}";

/* 可能是任何赋值，需要依据 LVal 类型检查 */
AsgnRVal    ::= Expr | Note | Measure | Phrase | Track;
Asgn        ::= LVal "=" AsgnRVal;

/* 声明部分 */
ConstDef    ::= IDENT "=" AsgnRVal;
ConstDecl   ::= "const" BType ConstDef {"," ConstDef} ";";
VarDef      ::= IDENT | IDENT "=" AsgnRVal;
VarDecl     ::= BType VarDef {"," VarDef}; ";";
Decl        ::= ConstDecl | VarDecl;

/* 函数相关 */
FuncType    ::= "void" | BType;
FuncFParams ::= FuncFParam {"," FuncFParam};
FuncFParam  ::= Type IDENT;
FuncRParams ::= AsgnRVal {"," AsgnRVal};
FuncDef     ::= FuncType IDENT "(" [FuncFParams] ")" Block;  /* 函数定义(无声明，直接实现) */
FuncCall    ::= IDENT "(" [FuncRParams] ")";                 /* 函数调用 */

Break       ::= "break" ";";                /* break */
Continue    ::= "continue" ";";             /* continue */
Return      ::= "return" [NoteExpr] ";";    /* return */

Stmt        ::= MatchedStmt | OpenStmt;
OpenStmt    ::= "if" "(" Expr ")" Stmt
              | "if" "(" Expr ")" MatchedStmt "else" OpenStmt
              | "while" "(" Expr ")" OpenStmt
              ;
MatchedStmt ::= "if" "(" Expr ")" MatchedStmt "else" MatchedStmt
              | "while" "(" Expr ")" MatchedStmt
              | Block
              | While
              | Decl
              | Asgn
              | [NoteExpr] ";"   /* 可能用于单纯的函数调用，以及单纯的 ';' 符号 */
              | Break
              | Continue
              | Return
              ;

Block       ::= "{" {Stmt} "}";

ScoreStmt ::= "@" Expr "<-" TrackRVal ";"  /* 设置输入轨道 */
              | "@" Expr "->" Expr ";"       /* 设置midi乐器,0-127 */
              ;

Score       ::= "@" "score" "{" {Stmt} {ScoreStmt} "}"

CompUnit    ::= {Decl | FuncDef} Score;
